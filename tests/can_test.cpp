#include <can/can.h>
#include <gtest/gtest.h>
#include <fstream>

#include <iostream>
#include "../inc/network_Can_generated.h" // This was generated by `flatc`.
#include "../inc/flatbuffers.h"
#include "../inc/util.cpp"
#include "../inc/idl_parser.cpp"
#include "../inc/idl_gen_text.cpp"
using namespace NetworkModels::CAN; // Specified in the schema.

TEST(CanTests, TestServerComError)
{
    std::ifstream infile;
    infile.open("../../server_connection_failure.log");

    bool ok = infile.fail();
    ASSERT_TRUE(ok);
}
TEST(CanTests, TestClientComError)
{
    std::ifstream infile;
    infile.open("../../client_connection_failure.log");

    bool ok = infile.fail();
    ASSERT_TRUE(ok);
}

TEST(CanTests, TestClientSendError)
{
    std::ifstream infile;
    infile.open("../../client-send-error.log");
    
    bool ok = infile.fail();
    ASSERT_TRUE(ok);
}
TEST(CanTests, TestClientRecieveError)
{
    std::ifstream infile;
    infile.open("../../client-receive-error.log");
    
    bool ok = infile.fail();
    ASSERT_TRUE(ok);
}

TEST(CanTests, TestServerSendError)
{
    std::ifstream infile;
    infile.open("../../server-send-error.log");
    
    bool ok = infile.fail();
    ASSERT_TRUE(ok);
}

TEST(CanTests, TestServerReceiveError)
{
    std::ifstream infile;
    infile.open("../../server-receive-error.log");
    
    bool ok = infile.fail();
    ASSERT_TRUE(ok);
}
TEST(CanTests, TestNetworkCanLog)
{
    std::ifstream infile;
    infile.open("../../network.log");
    
    bool ok = infile.fail();
    ASSERT_FALSE(ok);
}

TEST(CanTests, TestFlatbufferData)
{
    std::ifstream infile;
    infile.open("../../network.can", std::ios::binary | std::ios::in);
    infile.seekg(0,std::ios::end);
    int length = infile.tellg();
    infile.seekg(0,std::ios::beg);
    char *data = new char[length];
    infile.read(data, length);
    infile.close();

    ASSERT_GT(sizeof(data),0);

    auto metaData = GetRegisterFile(data);
    auto bufferData = metaData->buffer();

    auto frameData = bufferData->Get(0)->frame();
    int frameId = frameData->frame_id();

    ASSERT_EQ(frameId,12);
   
    auto payloadLen = frameData->length();

    ASSERT_GT(payloadLen,0);

    bool rtr = frameData->rtr();
    
    ASSERT_FALSE(rtr);

}

TEST(CanTests, TestClientNewpayloadLog)
{
    std::ifstream infile;
    infile.open("../../payload_output.log",std::ios::in);
     std::string sLine;
    if (infile.good())
    {
       
        getline(infile, sLine);
        
    }
    
    std::string str = "0124";
  
    ASSERT_TRUE(sLine == str);
}
int main(int argc, char** argv)
{
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
}