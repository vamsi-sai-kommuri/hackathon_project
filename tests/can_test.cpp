#include <can/can.h>
#include <gtest/gtest.h>
#include <fstream>

#include <iostream>
#include "../inc/network_Can_generated.h" // This was generated by `flatc`.
#include "../inc/flatbuffers.h"
#include "../inc/util.cpp"
#include "../inc/idl_parser.cpp"
#include "../inc/idl_gen_text.cpp"
using namespace NetworkModels::CAN; // Specified in the schema.


TEST(CanTests, TestClientSendError)
{
    std::ifstream infile;
    infile.open("../../../src/client-send-error.log");
    
    bool ok = infile.fail();
    ASSERT_TRUE(ok);
}
TEST(CanTests, TestClientRecieveError)
{
    std::ifstream infile;
    infile.open("../../../src/client-receive-error.log");
    
    bool ok = infile.fail();
    ASSERT_TRUE(ok);
}

TEST(CanTests, TestServerSendError)
{
    std::ifstream infile;
    infile.open("../../../src/server-send-error.log");
    
    bool ok = infile.fail();
    ASSERT_TRUE(ok);
}

TEST(CanTests, TestServerReceiveError)
{
    std::ifstream infile;
    infile.open("../../../src/server-receive-error.log");
    
    bool ok = infile.fail();
    ASSERT_TRUE(ok);
}
TEST(CanTests, TestNetworkCanLog)
{
    std::ifstream infile;
    infile.open("../../../src/network.log");
    
    bool ok = infile.fail();
    ASSERT_FALSE(ok);
}

TEST(CanTests, TestFlabufferData)
{
    std::ifstream infile;
    infile.open("../../../src/network.can", std::ios::binary | std::ios::in);
    infile.seekg(0,std::ios::end);
    int length = infile.tellg();
    infile.seekg(0,std::ios::beg);
    char *data = new char[length];
    infile.read(data, length);
    infile.close();

    ASSERT_GT(sizeof(data),0);

    auto metaData = GetRegisterFile(data);
    auto bufferData = metaData->buffer();

    auto frameData = bufferData->Get(0)->frame();
    int frameId = frameData->frame_id();

    ASSERT_EQ(frameId,12);
   
    auto payloadLen = frameData->length();

    ASSERT_GT(payloadLen,0);

    bool rtr = frameData->rtr();
    
    ASSERT_FALSE(rtr);

    auto FrameType = frameData->type();
 
    auto bufferStatus = bufferData->Get(0)->status();

   

    auto bufferDirection = bufferData->Get(0)->direction();
    auto canIndicator = bufferData->Get(0)->canFD_enabled();
    auto messageTiming = bufferData->Get(0)->timing();



}
int main(int argc, char** argv)
{
    ::testing::InitGoogleTest(&argc, argv);
    return RUN_ALL_TESTS();
    
}